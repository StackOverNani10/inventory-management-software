// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Item {
  id                      String                    @id @default(auto()) @map("_id") @db.ObjectId
  title                   String
  description             String?
  category                Category                  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId              String                    @db.ObjectId
  sku                     String                    @unique
  barcode                 String?
  quantity                Int
  unit                    Unit                      @relation(fields: [unitId], references: [id])
  unitId                  String                    @db.ObjectId
  brand                   Brand                     @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId                 String                    @db.ObjectId
  sellingPrice            Float
  buyingPrice             Float
  supplier                Supplier?                 @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  supplierId              String?                   @db.ObjectId
  reOrderPoint            Int
  Warehouse               Warehouse?                @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  warehouseId             String?                   @db.ObjectId
  imageUrl                String
  weight                  Float?
  dimensions              String?
  taxRate                 Float
  notes                   String?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  AddStockAdjustment      AddStockAdjustment[]
  TransferStockAdjustment TransferStockAdjustment[]
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Item        Item[]
}

model Brand {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Item      Item[]
}

model Unit {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  abbreviation String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Item         Item[]
}

model Warehouse {
  id                 String                    @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  location           String?
  description        String?
  warehouseType      String
  stockQty           Int                       @default(0)
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  Item               Item[]
  AddStockAdjustment AddStockAdjustment[]
  givingWarehouse    TransferStockAdjustment[] @relation("GivingWarehouse")
  receivingWarehouse TransferStockAdjustment[] @relation("ReceivingWarehouse")
}

model AddStockAdjustment {
  id                   String     @id @default(auto()) @map("_id") @db.ObjectId
  referenceNumber      String
  item                 Item       @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId               String     @db.ObjectId
  addStockQty          Int
  notes                String?
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  receivingWarehouse   Warehouse? @relation(fields: [receivingWarehouseId], references: [id], onDelete: Cascade)
  receivingWarehouseId String?    @db.ObjectId
  Supplier             Supplier?  @relation(fields: [supplierId], references: [id])
  supplierId           String?    @db.ObjectId
}

model TransferStockAdjustment {
  id                   String     @id @default(auto()) @map("_id") @db.ObjectId
  referenceNumber      String
  item                 Item       @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId               String     @db.ObjectId
  transferStockQty     Int
  notes                String?
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  givingWarehouse      Warehouse? @relation("GivingWarehouse", fields: [givingWarehouseId], references: [id], onDelete: Cascade)
  givingWarehouseId    String?    @db.ObjectId
  receivingWarehouse   Warehouse? @relation("ReceivingWarehouse", fields: [receivingWarehouseId], references: [id], onDelete: Cascade)
  receivingWarehouseId String?    @db.ObjectId
}

model Supplier {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  phone              String?
  email              String?
  address            String?
  contactPerson      String?
  supplierCode       String               @unique
  paymentTerms       String?
  taxID              String?
  notes              String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  Item               Item[]
  AddStockAdjustment AddStockAdjustment[]
}
